#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use std::ffi::CStr;
use std::ffi::CString;

extern crate anyhow;
use anyhow::Result;
use std::os::raw::c_char;
use std::{slice, str};


use std::io::Write;

extern crate reader;
use reader::MotrReader;

include!(concat!(env!("OUT_DIR"), "/bindings.rs"));

fn main() {
    unsafe {
        let ha_addr = CString::new("172.31.12.177@tcp:12345:34:1").expect("CString::new failed");
        let local_addr = CString::new("172.31.12.177@tcp:12345:33:1000").expect("CString::new failed");
        let profile_fid = CString::new("0x7000000000000001:0").expect("CString::new failed");
        let process_fid = CString::new("0x7200000000000001:64").expect("CString::new failed");
        let reader = MotrReader::new(ha_addr.as_ptr(), local_addr.as_ptr(), 
                                         profile_fid.as_ptr(), process_fid.as_ptr());
        }
}

